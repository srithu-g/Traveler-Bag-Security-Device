#include <Adafruit_Fingerprint.h> 
#include <SoftwareSerial.h> 
 
// Pins for fingerprint sensor 
SoftwareSerial mySerial(D7, D8); 
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial); 
 
void setup() { 
  Serial.begin(9600); 
  mySerial.begin(57600); 
 
  if (finger.verifyPassword()) { 
    Serial.println("Found fingerprint sensor!"); 
  } else { 
    Serial.println("Did not find fingerprint sensor :("); 
    while (1); 
  } 
} 
 
void loop() { 
  Serial.println("Ready to enroll a fingerprint!"); 
  Serial.println("Please type in the ID # (from 1 to 127) you want 
to save this finger as..."); 
  int id = readNumber(); 
   
  if (id < 1 || id > 127) { 
    Serial.println("Invalid ID! Please enter a number between 1 and 
127."); 
    return; 
  } 
 
  Serial.print("Enrolling ID #"); Serial.println(id); 
  while (!enrollFingerprint(id)); 
  Serial.println("Enrolled successfully!"); 
} 
 
uint8_t enrollFingerprint(int id) {

 int p = -1; 
  Serial.print("Waiting for valid finger to enroll as ID #"); 
Serial.println(id); 
 
  while (p != FINGERPRINT_OK) { 
    p = finger.getImage(); 
    switch (p) { 
      case FINGERPRINT_OK: 
        Serial.println("Image taken"); 
        break; 
      case FINGERPRINT_NOFINGER: 
        Serial.print("."); 
        delay(100); 
        break; 
      case FINGERPRINT_PACKETRECIEVEERR: 
        Serial.println("Communication error"); 
        break; 
      case FINGERPRINT_IMAGEFAIL: 
        Serial.println("Imaging error"); 
        break; 
      default: 
        Serial.println("Unknown error"); 
        break; 
    } 
  } 
 
  p = finger.image2Tz(1); 
  switch (p) { 
    case FINGERPRINT_OK: 
      Serial.println("Image converted"); 
      break; 
    case FINGERPRINT_IMAGEMESS: 
      Serial.println("Image too messy"); 
      return p; 
    case FINGERPRINT_PACKETRECIEVEERR: 
      Serial.println("Communication error"); 
      return p; 
    case FINGERPRINT_FEATUREFAIL: 
      Serial.println("Could not find fingerprint features"); 
      return p; 
    case FINGERPRINT_INVALIDIMAGE: 
      Serial.println("Could not find fingerprint features");

 return p; 
    default: 
      Serial.println("Unknown error"); 
      return p; 
  } 
 
  Serial.println("Remove finger"); 
  delay(2000); 
  p = 0; 
  while (p != FINGERPRINT_NOFINGER) { 
    p = finger.getImage(); 
  } 
 
  Serial.println("Place same finger again"); 
  p = -1; 
  while (p != FINGERPRINT_OK) { 
    p = finger.getImage(); 
    switch (p) { 
      case FINGERPRINT_OK: 
        Serial.println("Image taken"); 
        break; 
      case FINGERPRINT_NOFINGER: 
        Serial.print("."); 
        delay(100); 
        break; 
      case FINGERPRINT_PACKETRECIEVEERR: 
        Serial.println("Communication error"); 
        break; 
      case FINGERPRINT_IMAGEFAIL: 
        Serial.println("Imaging error"); 
        break; 
      default: 
        Serial.println("Unknown error"); 
        break; 
    } 
  } 
 
  p = finger.image2Tz(2); 
  switch (p) { 
    case FINGERPRINT_OK: 
      Serial.println("Image converted"); 
      break;

  case FINGERPRINT_IMAGEMESS: 
      Serial.println("Image too messy"); 
      return p; 
    case FINGERPRINT_PACKETRECIEVEERR: 
      Serial.println("Communication error"); 
      return p; 
    case FINGERPRINT_FEATUREFAIL: 
      Serial.println("Could not find fingerprint features"); 
      return p; 
    case FINGERPRINT_INVALIDIMAGE: 
      Serial.println("Could not find fingerprint features"); 
      return p; 
    default: 
      Serial.println("Unknown error"); 
      return p; 
  } 
 
  Serial.print("Creating model for #"); Serial.println(id); 
 
  p = finger.createModel(); 
  if (p == FINGERPRINT_OK) { 
    Serial.println("Prints matched!"); 
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) { 
    Serial.println("Communication error"); 
    return p; 
  } else if (p == FINGERPRINT_ENROLLMISMATCH) { 
    Serial.println("Fingerprints did not match"); 
    return p; 
  } else { 
    Serial.println("Unknown error"); 
    return p; 
  } 
 
  p = finger.storeModel(id); 
  if (p == FINGERPRINT_OK) { 
    Serial.println("Stored!"); 
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) { 
    Serial.println("Communication error"); 
    return p; 
  } else if (p == FINGERPRINT_BADLOCATION) { 
    Serial.println("Could not store in that location"); 
    return p;

} else if (p == FINGERPRINT_FLASHERR) { 
Serial.println("Error writing to flash"); 
return p; 
} else { 
Serial.println("Unknown error"); 
return p; 
} 
return true; 
} 
int readNumber() { 
int number = 0; 
while (Serial.available() == 0) { 
// Wait for user input 
} 
while (Serial.available() > 0) { 
int digit = Serial.read() - '0'; 
if (digit >= 0 && digit <= 9) { 
number = number * 10 + digit; 
} 
} 
return number; 
}
